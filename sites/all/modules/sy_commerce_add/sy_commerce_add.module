<?php

include_once('sy_commerce_add_functions.inc');
include_once('sy_commerce_add_block.inc');


function sy_commerce_add_menu() {
    $items = array();

    $items['change-sity'] = array(
        'page callback' => 'sy_commerce_add_change_sity',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['admin/test_form'] = array(
        'title' => 'test form',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sy_commerce_add_test_form'),
        'access arguments' => array('administer content'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'test.inc',
        'weight' => 5,
    );
    return $items;
}

function sy_commerce_add_ctools_plugin_directory($owner, $plugin_type){
    if ($owner == 'feeds_tamper' && $plugin_type == 'plugins') {
        return 'plugins';
    }
}


function sy_commerce_add_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id)
{
    $form['actions']['lnk']=array(
        '#markup'=>l('Продолжить покупки',  (isset($_GET['return']))?$_GET['return']:'catalog' , array('attributes' => array('class'=>'catalog-link'))),
        '#weight'=>-50);
}
function sy_commerce_add_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id)
{
    if(isset($form_state['context']['entity_id'])
        && isset($form_state['default_product']->type) && $form_state['default_product']->type=='product') {

        if (!isset($form_state['list_product_in_stok'])) $form_state['list_product_in_stok'] = sy_commerce_add_get_list_product_in_stocks($form_state['context']['entity_id']);
        $city_stocks = sy_commerce_add_get_city_stocks_in($form_state['list_product_in_stok']);
        $city_stocks_all = sy_commerce_add_get_city_stocks();
        $keys_location = array_keys($city_stocks_all);
    }

    if(isset($form_state['context']['entity_id'])
                                && $form_state['context']['view_mode']=='node_product' && $form_state['context']['display']=='product'
                                && isset($form_state['default_product']->type) && $form_state['default_product']->type=='product') {
            if (isset($_SESSION['sy_commerce_add_city'])) {
            $def_city = $_SESSION['sy_commerce_add_city'];
        } else {
            $city_location = sy_commerce_add_get_city_stocks_location();
            if (is_string($city_location) && in_array($city_location, $city_stocks_all)) {
                $def_city = $city_location;
            } else {
                $def_city = $keys_location[0];
            }
        }
        if(array_key_exists($def_city, $city_stocks) ) {
            $options_product = sy_commerce_add_get_options_product($form_state['list_product_in_stok'], $def_city);
            $form['product_id']['#options'] = $options_product;
  //          $form['product_id']['#default_value']=14360;
//            $form['product_id']['#value']=14360;
      //     $form['product_id']['#disabled'] = TRUE;
            $form['product_id']['#attributes']['style'] = 'display:none;';
        }

        $form['#attached']['js'][] = array(
            'data' => '(function ($) { Drupal.behaviors.sy_commerce_add_views_add_cart = { attach: function (context, settings) { $("#edit-product-id").change(); } }; }(jQuery));',
            'type' => 'inline',
        );
    }


    if(isset($form_state['context']['entity_id']) && $form_state['context']['view_mode']=='node_full' && isset($form_state['default_product']->type) && $form_state['default_product']->type=='product') {
      //dpm($form_state['list_product_in_stok']);
        if(count($city_stocks_all)>0) {

            $form['#prefix'] = '<div id="cart-gip-form-wrapper">';
            $form['#suffix'] = '</div>';

            if (isset($form_state['values']['city'])) {
                $def_city = $form_state['values']['city'];
            } elseif (isset($_SESSION['sy_commerce_add_city']) /* && array_key_exists($_SESSION['sy_commerce_add_city'], $city_stocks) */) {
                $def_city = $_SESSION['sy_commerce_add_city'];
            } else {
                $city_location = sy_commerce_add_get_city_stocks_location();
                if (is_string($city_location) && in_array($city_location, $city_stocks_all)) {
                    $def_city = $city_location;
                } else {
                    $def_city = $keys_location[0];
                }
            }
            /*
            $form['city'] = array(
                '#type' => 'select',
                '#title' => 'Город',
                '#default_value' => $def_city,
                '#options' => $city_stocks_all,
                '#ajax' => array(
                    'callback' => 'sy_commerce_add_city_choice_js',
                    'wrapper' => 'cart-gip-form-wrapper',
                    'method' => 'replace',
                    'effect' => 'fade',
                ),
            );
            */
            $form['table']=sy_commerce_add_get_stocks_table($form_state['context']['entity_id'],$def_city);

            if(array_key_exists($def_city, $city_stocks) ) {
                $options_product = sy_commerce_add_get_options_product($form_state['list_product_in_stok'], $def_city);
                $form['product_id']['#options'] = $options_product;

                if(count($options_product)==1) $form['product_id']['#attributes']['style'] = 'display:none;';
            }
            else
            {
                $form['product_id']['#disabled'] = TRUE;
                $form['product_id']['#attributes']['style'] = 'display:none;';
                $form['quantity']['#disabled'] = TRUE;
                $form['submit']['#disabled'] = TRUE;
                $form['submit']['#access'] = FALSE; // issues/476 #3
            }
            $go2cart_class =array('class'=>'catalog-link');
            $product_in_cart=sy_commerce_add_product_in_cart(isset($form['product_id']['#default_value'])?$form['product_id']['#default_value']:$form['product_id']['#value']);
            if($product_in_cart)
            {
                $form['submit']['#attributes']['class'][]='element-invisible';
            }
            else
            {
                $go2cart_class =array('class'=>'catalog-link element-invisible');
            }
            $form['go2cart']=array('#markup'=>l('В корзине',  'cart' , array('query' => array('return'=>'node/'.$form_state['context']['entity_id']),'attributes'=>$go2cart_class)));
        }
        else
        {
            $form['city_information'] = array('#markup' => 'Нет городов', );
        }

//        dpm($form['product_id']);
        if(module_exists('dc_ajax_add_cart')) {
            drupal_add_css(drupal_get_path('module', 'dc_ajax_add_cart') . '/css/dc_ajax_add_cart.css');
            drupal_add_js(drupal_get_path('module', 'dc_ajax_add_cart') . '/js/dc_ajax_add_cart_html.js');
        }
        $form['#attached']['js'] = array(
            drupal_get_path('module', 'sy_commerce_add') . '/add_cart.js',
        );
    }
    //commerce_cart_add_to_cart_form_attributes_refresh($form, $form_state);
}
 
function sy_commerce_add_city_choice_js($form, &$form_state)
{
    $form_state['no_cache'] = TRUE;
    $form_state['rebuild'] = TRUE;
    return commerce_cart_add_to_cart_form_attributes_refresh($form, $form_state);

}

/**
 * Implements hook_commerce_cart_attributes_refresh_alter().
 */
function sy_commerce_add_commerce_cart_attributes_refresh_alter(&$commands, $form, $form_state)
{
  //  $product_in_cart=sy_commerce_add_product_in_cart($form_state['values']['product_id']);
 //  if($product_in_cart) $commands[] = ajax_command_invoke('input.form-submit', 'addClass', array('element-invisible'));
   // $commands[] = ajax_command_invoke('input.form-submit', 'addClass', array('element-invisible'));
}

function sy_commerce_add_feeds_after_import(FeedsSource $source) {
    // watchdog('sy commerce add',$source->id . '  =  '.variable_get('sy_commerce_add_cron',0));
    // похоже сам себя не запускает :(
    if ($source->id == 'import_catalog_pharm'  || $source->id == 'import_display_product_pharm') {
        variable_set('sy_commerce_add_cron',($source->id == 'import_display_product_pharm'?2:1));
        watchdog('sy commerce add','step 2');
        $fetcher_config = $source->getConfigFor($source->importer->fetcher);
        $second_source = feeds_source('import_product_pharm');
        $second_source->setConfigFor($second_source->importer->fetcher, $fetcher_config);
        $second_source->save();
        $second_source->startImport();

    }
    elseif ($source->id == 'import_product_pharm' && variable_get('sy_commerce_add_cron',0)!=2 ) {
        watchdog('sy commerce add','step 3');
        $fetcher_config = $source->getConfigFor($source->importer->fetcher);
        $second_source = feeds_source('import_display_product_pharm');
        $second_source->setConfigFor($second_source->importer->fetcher, $fetcher_config);
        $second_source->save();
        $second_source->startImport();
    }
    elseif ($source->id == 'import_product_pharm' && variable_get('sy_commerce_add_cron',0)==2 ) {
        db_update('node')
            ->fields(array('status' => 0))
            ->condition('type', 'product_display')
            ->condition('uid', 0)
            ->execute();

        watchdog('sy commerce add','step 4');
        file_unmanaged_delete('public://feeds-tmp/import.xml');
        variable_set('sy_commerce_add_cron',0);
    }
}
function sy_commerce_add_cron()
{
    //db_query('update elysia_cron set running = 0'); разблокировка
    $output = sy_commerce_add_get_orders_xml();
    file_unmanaged_save_data($output , drupal_realpath('public://feeds-tmp/output.xml'), FILE_EXISTS_REPLACE);
    watchdog('sy commerce add', 'GO');
    $source=drupal_realpath('public://feeds-tmp/import.xml');

    if(file_exists($source)) watchdog('sy commerce add','file is & var='.variable_get('sy_commerce_add_cron',0));
    if(variable_get('sy_commerce_add_cron',0)<1) watchdog('sy commerce add','cron 0');
    if(file_exists($source) && variable_get('sy_commerce_add_cron',0)==0) {
        watchdog('sy commerce add','step 1');



        db_update('node')
            ->fields(array('uid' => 0))
            ->condition('type', 'product_display')
            ->execute();


        variable_set('sy_commerce_add_cron',1);
        $myFeed = feeds_source('import_catalog_pharm');
        $config = array('FeedsFileFetcher' => array('source' => $source));
        $myFeed->addConfig($config);
        $myFeed->import();
    }
    elseif(!file_exists($source) )
    {
//        watchdog('sy commerce add',' not file_exists');
        variable_set('sy_commerce_add_cron',0);
    }
    else
    {
        //   watchdog('sy commerce add','not');
    }
}


function sy_commerce_add_views_query_alter(&$view, &$query) {

    if ($view->name == 'taxonomy_term' && isset($_SESSION['sy_commerce_add_city'])) {

        $city = $_SESSION['sy_commerce_add_city'];
        $join = new views_join();
       $join->construct('field_data_field_city_stock', 'commerce_product_field_data_field_product', 'product_id', 'entity_id');
        $query->add_relationship('field_data_field_city_stock', $join, 'commerce_product_field_data_field_product');
        $query->add_where(1, 'field_data_field_city_stock.field_city_stock_value', $city);
    }
}

function sy_commerce_add_get_orders_xml()
{
    $stock_names = db_select('commerce_stock_sources', 's')
        ->fields('s', array('source_id', 'name'))
        ->execute()
        ->fetchAllKeyed();

    $out='<?xml version="1.0" encoding="UTF-8" ?>'." \n";
    $oids = db_query("SELECT order_id FROM {commerce_order} WHERE status=:status", array(':status'=>'pending'))->fetchCol();
    $orders=commerce_order_load_multiple($oids);
    if(count($orders)>0) {
        $out .= "<commerce_orders> \n";
        foreach ($orders as $order) {
            $out .= "<commerce_order> \n";
            $out .= "<ID-order>$order->order_id</ID-order> \n";
            $out .= "<E-mail>$order->mail</E-mail> \n";
            $out .= "<Date-created>" . date("d/m/Y - H:i", $order->created) . "</Date-created> \n";
            $out .= "<Order-total>" . ($order->commerce_order_total['und'][0]['amount'] / 100) . "</Order-total> \n";
            $out .= "<list-products>" . sy_commerce_add_get_orders_xml_lines($order->order_id,$stock_names) . "</list-products> \n";
            $out .= isset($order->commerce_customer_billing['und'][0]['profile_id'])?sy_commerce_add_get_orders_xml_profiles($order->commerce_customer_billing['und'][0]['profile_id']):'';
            $out .= "</commerce_order> \n";
        }
        $out .= "</commerce_orders> \n";

        return $out;
    }
    else
    {
        return '';
    }
}
function sy_commerce_add_get_orders_xml_lines($order_id,$stock_names) {
    $out='';
    $oids = db_query("SELECT prd.title, prc.commerce_price_amount, prd.sku, prd.product_id, cli.quantity, adqt.quantity as add_qty 
                    FROM {commerce_line_item} AS cli
                    LEFT JOIN {commerce_product} AS prd ON prd.sku = cli.line_item_label
                    LEFT JOIN {field_data_commerce_price} AS prc ON prc.entity_id = prd.product_id 
                    LEFT JOIN {sy_commerce_add_quantity} AS adqt ON adqt.line_item_id = cli.line_item_id  
                    WHERE cli.order_id = :order_id AND cli.type = 'product'",array(':order_id'=>$order_id));
    foreach ($oids as $key=>$val)
    {
        $out.="<product> \n";
        $out.="<name>$val->title</name> \n";
        $out.="<SKU>$val->sku</SKU> \n";
        $out.="<price>".($val->commerce_price_amount/100)."</price> \n";
        $out.=sy_commerce_add_get_orders_xml_lines_stock($val->product_id,$stock_names);
        $out.="<qty>$val->quantity</qty> \n";
        $out.="<qty-add>".($val->add_qty!=0?$val->add_qty:0)."</qty-add> \n";
        $out.="</product> \n";
    }
    return $out;
}
function sy_commerce_add_get_orders_xml_lines_stock($pid,$stock_names) {
    $stock_sets = db_query("SELECT * FROM {commerce_stock_calculation} WHERE name = :name", array(':name' => 'stock_calculation:' . $pid))->fetchObject();
    if (isset($stock_sets->plugin)) {
        if ($stock_sets->plugin == 'sum_calculation') {
            $settings = unserialize($stock_sets->settings);
             foreach ($settings as $key=>$value)
            {
                if($value==1)
                {
                    return "<stock-name>".$stock_names[$key]."</stock-name> \n";
                }
            }
        }
    }
    return '';
}

function sy_commerce_add_get_orders_xml_profiles($order_id) {
    $out='';

    $profile=commerce_customer_profile_load($order_id);
    if(isset($profile->commerce_customer_address['und'][0]))
    {
        $cb=$profile->commerce_customer_address['und'][0];

        module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
        $administrative_areas = addressfield_get_administrative_areas($cb['country']);

        $out.="<customer_address> \n";
        $out.="<first_name>".$cb['first_name']."</first_name> \n";
        $out.="<last_name>".$cb['last_name']."</last_name> \n";
        $out.="<organisation_name>".$cb['organisation_name']."</organisation_name> \n";
        $out.="<thoroughfare>".$cb['thoroughfare']."</thoroughfare> \n";
        $out.="<premise>".$cb['premise']."</premise> \n";
        $out.="<locality>".$cb['locality']."</locality> \n";
        if(isset($cb['administrative_area']) && isset($administrative_areas[$cb['administrative_area']])) $out.="<administrative_area>".$administrative_areas[$cb['administrative_area']]."</administrative_area> \n";
        $out.="<postal_code>".$cb['postal_code']."</postal_code> \n";
        $out.="</customer_address> \n";
    }
    return $out;
}